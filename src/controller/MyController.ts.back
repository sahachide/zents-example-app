import { resolve } from 'path'
import { EntityManager } from 'typeorm'
import {
  auth,
  Context,
  Controller,
  log,
  put,
  post,
  get,
  securityProvider,
  SecurityProvider,
  entityManager,
  session,
  Session,
  body,
  request,
  req,
} from 'zents'
import { User } from '../entity/User'

export class MyController extends Controller {
  @entityManager
  private em: EntityManager

  @get('/')
  public async index({ req }: Context, @securityProvider() security: SecurityProvider) {
    const hash = await security.generatePasswordHash('test')

    return {
      hash,
    }
  }

  @post('/body-test')
  public bodyTest(ctx: Context, @req req: any) {
    log.info(req)

    return {
      foo: 'bar',
    }
  }

  @auth()
  @get('/firewall')
  public firewall(
    context: Context,
    @session()
    session: Session<User>,
  ) {
    log.info(session.user.id)

    session.data.set('foo', 'bar')

    return {
      firewall: true,
    }
  }

  @get('/free')
  public free(context: Context, @session() user: any) {
    log.info(user)

    return {
      free: user.username,
    }
  }

  @auth()
  @get('/member')
  public member() {
    return {
      member: true,
    }
  }

  @get('/failed')
  public failed() {
    return {
      failed: true,
    }
  }

  @get('/forbidden')
  public forbidden() {
    return {
      forbidden: true,
    }
  }

  @get('/redirect')
  public redirect({ response }: Context) {
    return response.redirect('/redirected')
  }

  @get('/redirected')
  public redirected() {
    return {
      redirected: true,
    }
  }

  @post('/user/:userId')
  public async updateUser({ params, body }: Context<{ userId: string }, { username: string }>) {
    log.info(params.userId)
    log.info(body.username)
    return {
      foo: 'bar',
    }
  }

  @put('/user')
  public async createUser(
    {
      body,
    }: Context<
      unknown,
      {
        username: string
        password: string
      }
    >,
    @securityProvider() security: SecurityProvider,
  ) {
    let user = new User()

    user.username = body.username
    user.password = await security.generatePasswordHash(body.password)
    console.log(user)

    user = await this.em.save(user)

    return {
      id: user.id,
    }
  }
}
